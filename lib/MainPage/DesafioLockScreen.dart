import 'dart:async';

import 'package:christmas_project/Timer_Tools/TimeService.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

class LockScreen extends StatefulWidget {

  final int desafioIndex;
  final VoidCallback onComplete;
  
  LockScreen({required this.desafioIndex, required this.onComplete});


  @override
  _LockScreenState createState() => _LockScreenState();
}

class _LockScreenState extends State<LockScreen> {
  
  // Controladores para los TextFields
  final TextEditingController _controller1 = TextEditingController();
  final TextEditingController _controller2 = TextEditingController();
  final TextEditingController _controller3 = TextEditingController();
  final TextEditingController _controller4 = TextEditingController();

  // FocusNodes para manejar el enfoque del cursor
  final FocusNode _focusNode1 = FocusNode();
  final FocusNode _focusNode2 = FocusNode();
  final FocusNode _focusNode3 = FocusNode();
  final FocusNode _focusNode4 = FocusNode();

  // Lista para almacenar las pistas generadas
  List<String> _hints = [];

  // C√≥digo correcto
  final String _correctCode = "2597";
  int intentos = 0;
  bool _isTimeUp = false; // Para saber si el tiempo se agot√≥

  @override
  void initState() {
    super.initState();
     
      WidgetsBinding.instance.addPostFrameCallback((_) => _showChallengeDialog());
    
  }

  // M√©todo para mostrar un cuadro de ayuda
  void _showHelpDialog() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text("Ayuda"),
          content: Text("Debes enviar el primer intento de c√≥digo para generar nuevas pistas\n\nTomar en cuenta que mas de un campo no puede contener el mismo n√∫mero"),
          actions: <Widget>[
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: Text("Cerrar"),
            ),
          ],
        );
      },
    );
  }

  // Funci√≥n para verificar el c√≥digo
  void _checkCode() {
    String enteredCode = (_controller1.text.isEmpty ? '0' : _controller1.text) +
                     (_controller2.text.isEmpty ? '0' : _controller2.text) +
                     (_controller3.text.isEmpty ? '0' : _controller3.text) +
                     (_controller4.text.isEmpty ? '0' : _controller4.text);

    // Limpiar las pistas anteriores antes de agregar una nueva
    setState(() {
      _hints.clear();
    });
  
    // Verificar si el c√≥digo ingresado es correcto
    if (enteredCode == _correctCode) {
      setState(() {
        widget.onComplete();
        Navigator.pop(context);
        _showSuccessDialog();
      });

    } else {
      // Esperar 1 segundo antes de generar las nuevas pistas
    Future.delayed(Duration(seconds: 1), () {
      setState(() {
        // Generar una nueva pista despu√©s de 1 segundo
        _hints.add(_generateHint(enteredCode)); 
        intentos++; // Aumentar el n√∫mero de intentos
      });
    });
  }
    }

  void _showChallengeDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('¬°Bienvenido al Desaf√≠o 4!'),
        content: SingleChildScrollView(  // Permite que el contenido se desplace si es largo
          child: Column(
            children: [
              Text(
                "¬°Buen trabajo, elfos! Hab√©is logrado restaurar el flujo de informaci√≥n, pero la misi√≥n a√∫n no est√° completa. El villano ha dejado un enigma en forma de un c√≥digo que es crucial para avanzar. Cada intento os dar√° nuevas pistas, pero s√≥lo la combinaci√≥n correcta abrir√° el camino. Recordad: no todo es lo que parece, y cada error puede acercaros un paso m√°s a la verdad. ¬°La Navidad est√° en juego, no perd√°is tiempo!",
                style: TextStyle(fontSize: 20.0, fontStyle: FontStyle.italic),
                textAlign: TextAlign.center,  // Centrar el texto para mejor apariencia
              ),
              SizedBox(height: 10),  // Espacio entre el texto y la imagen
              Image.asset(
                'assets/images/desafio_screen/codigo.gif',  // Ruta de la imagen de Pap√° Noel
                width: 150,
                height: 150,
              ),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.pop(context); // Cerrar el di√°logo
            },
            child: Text('Entendido'),
          ),
        ],
      ),
    );
  }

   void _showSuccessDialog() {
  showDialog(
    context: context,
    builder: (context) => AlertDialog(
      title: Text("Felicidades!!",style: TextStyle(fontSize: 30.0),),
      content: Text("¬°Excelente trabajo! Hab√©is resuelto el misterio y recuperado una parte del Esp√≠ritu Navide√±o. Pero la misi√≥n a√∫n no termina... ¬°El villano sigue siendo una amenaza! Prep√°rense para el siguiente desaf√≠o, ¬°la Navidad sigue dependiendo de vosotros! üéÖüéÑ",style: TextStyle(fontSize: 20.0),),
      actions: [
        TextButton(
          onPressed: () {
            Navigator.pop(context); // Cerrar el di√°logo
            // Puedes colocar aqu√≠ cualquier l√≥gica adicional, como avanzar a la siguiente pantalla o tarea
            // Por ejemplo:
          },
          child: Text("Avanzar"),
        ),
      ],
    ),
  );
}


/*// Funci√≥n para generar pistas basadas en el c√≥digo ingresado
String _generateHint(String enteredCode) {
  int correctCount = 0;
  int misplacedCount = 0;
  int incorrectCount = 0;

  // Listas para hacer seguimiento de los n√∫meros ya procesados
  List<bool> countedAsCorrect = List.filled(enteredCode.length, false);
  List<bool> countedAsMisplaced = List.filled(enteredCode.length, false);
  List<bool> countedInCorrectCode = List.filled(_correctCode.length, false);

  // Primero, verificamos los n√∫meros correctos en su lugar
  for (int i = 0; i < enteredCode.length; i++) {
    if (enteredCode[i] == _correctCode[i]) {
      correctCount++;
      countedAsCorrect[i] = true; // Marcar como ya contado
      countedInCorrectCode[i] = true; // Marca la posici√≥n correcta ya validada
    }
  }

  // Ahora verificamos los n√∫meros en posici√≥n incorrecta
  for (int i = 0; i < enteredCode.length; i++) {
    if (enteredCode[i] != _correctCode[i] && _correctCode.contains(enteredCode[i])) {
      // Buscar el n√∫mero en el c√≥digo correcto, pero solo si no ha sido contado como correcto
      for (int j = 0; j < _correctCode.length; j++) {
        if (_correctCode[j] == enteredCode[i] && !countedInCorrectCode[j] && !countedAsMisplaced[j]) {
          misplacedCount++;
          countedAsMisplaced[i] = true; // Marcar como ya contado como "en posici√≥n incorrecta"
          countedInCorrectCode[j] = true; // Marcar la posici√≥n correcta ya validada
          break; // Salir del ciclo una vez que se cuente el n√∫mero en la posici√≥n incorrecta
        }
      }
    }
  }

  // Finalmente, contamos los n√∫meros incorrectos
  for (int i = 0; i < enteredCode.length; i++) {
    if (!countedAsCorrect[i] && !countedAsMisplaced[i]) {
      incorrectCount++;
    }
  }

  // Crear el mensaje gen√©rico
  String hint = '';
  if (correctCount > 0) {
    hint += "$correctCount n√∫mero(s) correcto(s), ";
  }
  if (misplacedCount > 0) {
    hint += "$misplacedCount n√∫mero(s) correcto(s) pero en posici√≥n incorrecta, ";
  }
  if (incorrectCount > 0) {
    hint += "$incorrectCount n√∫mero(s) incorrecto(s).";
  }

  return hint;
}*/

String _generateHint(String enteredCode) {
  int correctCount = 0;
  int misplacedCount = 0;
  int incorrectCount = 0;

  // Listas para hacer seguimiento de los n√∫meros ya procesados
  List<bool> countedAsCorrect = List.filled(enteredCode.length, false);
  List<bool> countedInCorrectCode = List.filled(_correctCode.length, false);

  // Primero, verificamos los n√∫meros correctos en su lugar
  for (int i = 0; i < enteredCode.length; i++) {
    if (enteredCode[i] == _correctCode[i]) {
      correctCount++;
      countedAsCorrect[i] = true; // Marcar como ya contado
      countedInCorrectCode[i] = true; // Marca la posici√≥n correcta ya validada
    }
  }

  // Ahora verificamos los n√∫meros en posici√≥n incorrecta
  for (int i = 0; i < enteredCode.length; i++) {
    if (enteredCode[i] != _correctCode[i] && _correctCode.contains(enteredCode[i])) {
      // Buscar el n√∫mero en el c√≥digo correcto, pero solo si no ha sido contado como correcto
      for (int j = 0; j < _correctCode.length; j++) {
        if (_correctCode[j] == enteredCode[i] && !countedInCorrectCode[j] && !countedAsCorrect[i]) {
          misplacedCount++;
          countedInCorrectCode[j] = true; // Marcar la posici√≥n correcta ya validada
          break; // Salir del ciclo una vez que se cuente el n√∫mero en la posici√≥n incorrecta
        }
      }
    }
  }

  // Finalmente, contamos los n√∫meros incorrectos (los que no est√°n en ninguna posici√≥n correcta o incorrecta)
  for (int i = 0; i < enteredCode.length; i++) {
    if (!countedAsCorrect[i] && !countedInCorrectCode[i]) {
      incorrectCount++;
    }
  }

  // Crear el mensaje gen√©rico
  String hint = '';
  if (correctCount > 0) {
    hint += "$correctCount n√∫mero(s) correcto(s), ";
  }
  if (misplacedCount > 0) {
    hint += "$misplacedCount n√∫mero(s) correcto(s) pero en posici√≥n incorrecta, ";
  }
  if (incorrectCount > 0) {
    hint += "$incorrectCount n√∫mero(s) incorrecto(s).";
  }

  return hint;
}



  @override
  void dispose() {
    // Limpiar los FocusNodes cuando ya no se usen
    _focusNode1.dispose();
    _focusNode2.dispose();
    _focusNode3.dispose();
    _focusNode4.dispose();
    super.dispose();
  }

  // Funci√≥n para verificar si hay n√∫meros duplicados en los campos
void _checkDuplicateNumber(String value, int index) {
  List<TextEditingController> controllers = [_controller1, _controller2, _controller3, _controller4];

  for (int i = 0; i < controllers.length; i++) {
    if (i != index && controllers[i].text == value) {
      // Si el valor es igual a otro campo, limpiar el campo actual
      controllers[index].clear();
      break; // No es necesario seguir buscando
    }
  }
}

  // Widget para crear los TextFields
  Widget _buildTextField(TextEditingController controller, FocusNode focusNode, FocusNode nextFocusNode, int index) {
    return Container(
      width: 50,
      height: 60,
      child: TextField(
        controller: controller,
        focusNode: focusNode,
        keyboardType: TextInputType.number,
        maxLength: 1,
        textAlign: TextAlign.center, // Centra el texto dentro del TextField
        style: TextStyle(
          fontSize: 25, // Aumenta el tama√±o de la fuente
          fontWeight: FontWeight.bold, // Opcional: hace el texto m√°s negrita
        ),
        decoration: InputDecoration(
          counterText: "",
          filled: true, // Habilita el fondo
          fillColor: Colors.white, // Establece el color de fondo blanco
          border: OutlineInputBorder(),
        ),
        onChanged: (value) {
        if (value.isNotEmpty) {
          // Verificar si el n√∫mero ya est√° en otro campo
          _checkDuplicateNumber(value, index);

          // Si no es el √∫ltimo campo, pasa al siguiente
          if (nextFocusNode != null) {
            FocusScope.of(context).requestFocus(nextFocusNode);
          }
        }
      },
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final timerService = Provider.of<TimerService>(context);
    if (timerService.isTimeUp && !_isTimeUp) {
    // Diferir la ejecuci√≥n de la l√≥gica usando addPostFrameCallback
    WidgetsBinding.instance.addPostFrameCallback((_) {
      // Actualizar el estado y cerrar la pantalla
      setState(() {
        _isTimeUp = true; // Marcar que el tiempo se agot√≥
      });

      // Cerrar la pantalla
      Navigator.pop(context);  // Esto cerrar√° la pantalla
    });
  }
    return Scaffold(
      appBar: AppBar(
          backgroundColor: Colors.red, // Fondo rojo
          title: Row(
            mainAxisAlignment: MainAxisAlignment.start,
            children: [
              // T√≠tulo
              Text(
                "Desafio 4",
                style: TextStyle(color: Colors.white), // Texto blanco
              ),
              // Espaciado flexible entre el t√≠tulo y el contador
              Expanded(
                child: Container(), // Expande el espacio restante para evitar que el contador se pegue al borde
              ),
              // Contador
              Container(
                padding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                decoration: BoxDecoration(
                  color: timerService.isTimeUp ? Colors.red : Colors.green,
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Text(
                  timerService.formatTime(timerService.totalSeconds),
                  style: TextStyle(color: Colors.white, fontSize: 20),
                ),
              ),
            ],
          ),
        ),
      body:Stack(
        children: [
          Positioned(
            top: 40,
            right: 20,
            child: CircleAvatar(
              radius: 25,
              backgroundColor: Colors.blue,
              child: IconButton(
                icon: Icon(Icons.help, color: Colors.white),
                onPressed: _showHelpDialog,
              ),
            ),
          ),

          Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const SizedBox(height: 20),
              const Text(
                'Desaf√≠o 4: El c√≥digo perdido',
                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
              )
            ]
          )
          ),

          Center(
        child: Container(
          padding: EdgeInsets.all(20.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Stack(
                alignment: Alignment.center,
                children: [
                  // Imagen del candado
                  Container(
                    width: 350,  // Tama√±o ajustado del candado
                    height: 350,  // Tama√±o ajustado del candado
                    decoration: BoxDecoration(
                      image: DecorationImage(
                        image: AssetImage('assets/images/desafio_screen/candado.png'), // Aseg√∫rate de agregar una imagen llamada "candado.png" en tu carpeta assets
                        fit: BoxFit.contain, // Ajusta la imagen de manera que quede bien en el contenedor sin estirarse
                      ),
                    ),
                  ),
                  // Los 4 TextFields dentro del candado
                  Positioned(
                    top: 250,  // Ubicaci√≥n vertical ajustada para los TextFields
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        _buildTextField(_controller1, _focusNode1, _focusNode2, 0),
                        SizedBox(width: 10),
                        _buildTextField(_controller2, _focusNode2, _focusNode3, 1),
                        SizedBox(width: 10),
                        _buildTextField(_controller3, _focusNode3, _focusNode4, 2),
                        SizedBox(width: 10),
                        _buildTextField(_controller4, _focusNode4, _focusNode4, 3), // El √∫ltimo campo no tiene siguiente
                      ],
                    ),
                  ),
                ],
              ),
              SizedBox(height: 30), // Espacio entre los TextFields y las pistas

              // Mostrar las pistas generadas
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: _hints.map((hint) => Text(hint, style: TextStyle(fontSize: 16, color: Colors.black))).toList(),
              ),
              SizedBox(height: 20),

              // Bot√≥n para enviar el intento
              ElevatedButton(
                onPressed: _checkCode,
                child: Text("Enviar Intento", style: TextStyle(fontSize: 18,color: Colors.white)),
                style: ElevatedButton.styleFrom(
                  backgroundColor:  Colors.green, // Color verde para el bot√≥n
                  padding: EdgeInsets.symmetric(horizontal: 30, vertical: 15),
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
                ),
              ),
            ],
          ),
        ),
      ),
        ],
      ) 

      
    );
  }
}